//
// Generated file, do not edit! Created by opp_msgc 4.4 from VAPacket.msg.
//

#ifndef _VAPACKET_M_H_
#define _VAPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>VAPacket.msg</tt> by opp_msgc.
 * <pre>
 * enum VAType {
 * 	RSU_BEACON = 1; 
 * 	RSU_BEACON_REPLY = 2; 
 * 	RSU_BASESTATION_FORWARD = 3; 
 * 	APP_DATA = 4; 
 * }
 * </pre>
 */
enum VAType {
    RSU_BEACON = 1,
    RSU_BEACON_REPLY = 2,
    RSU_BASESTATION_FORWARD = 3,
    APP_DATA = 4
};

/**
 * Class generated from <tt>VAPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet VAPacket {
 * 	int sourcePrefix;
 * 	int sourceSuffix;
 * 	int destPrefix;
 * 	int destSuffix;
 * 	int key; 
 * 	int type enum(VAType);  
 * }
 * </pre>
 */
class VAPacket : public ::cPacket
{
  protected:
    int sourcePrefix_var;
    int sourceSuffix_var;
    int destPrefix_var;
    int destSuffix_var;
    int key_var;
    int type_var;

  private:
    void copy(const VAPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VAPacket&);

  public:
    VAPacket(const char *name=NULL, int kind=0);
    VAPacket(const VAPacket& other);
    virtual ~VAPacket();
    VAPacket& operator=(const VAPacket& other);
    virtual VAPacket *dup() const {return new VAPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSourcePrefix() const;
    virtual void setSourcePrefix(int sourcePrefix);
    virtual int getSourceSuffix() const;
    virtual void setSourceSuffix(int sourceSuffix);
    virtual int getDestPrefix() const;
    virtual void setDestPrefix(int destPrefix);
    virtual int getDestSuffix() const;
    virtual void setDestSuffix(int destSuffix);
    virtual int getKey() const;
    virtual void setKey(int key);
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doPacking(cCommBuffer *b, VAPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VAPacket& obj) {obj.parsimUnpack(b);}


#endif // _VAPACKET_M_H_
